[
  {
    "path": "posts/2021-10-26-10-26-2021-tidy-tuesday/",
    "title": "10-26-2021 Tidy Tuesday",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-10-26",
    "categories": [],
    "contents": "\n\n\n# Or read in the data manually\n\nultra_rankings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv')\nrace <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv')\n\n\n\n\n\nlibrary(tidyverse)         # for reading in data, graphing, and cleaning\nlibrary(tidymodels)        # for modeling... tidily\nlibrary(usemodels)         # for suggesting step_XXX() functions\nlibrary(glmnet)            # for regularized regression, including LASSO\nlibrary(naniar)            # for examining missing values (NAs)\nlibrary(lubridate)         # for date manipulation\nlibrary(moderndive)        # for King County housing data\nlibrary(vip)               # for variable importance plots\nlibrary(rmarkdown)         # for paged tables\nlibrary(stacks)\nlibrary(doParallel)        # for parallel processing\ntheme_set(theme_minimal()) # my favorite ggplot2 theme :)\nlibrary(ggthemes)\nlibrary(hms)\n\n\n\n\n\nultra_rankings %>% \n  filter(age > 10, age < 100) %>%\n  select(rank, age, time_in_seconds, gender) %>% \n  drop_na() %>% \n  mutate(time_Hour = time_in_seconds / 3600) %>% \n  mutate(age_groups = cut(age, seq(10, 140, 10))) %>% \n  group_by(age_groups, gender) %>% \n  summarize(mean_time = mean(time_Hour)) %>% \n  ggplot(aes(x= age_groups, y = mean_time, fill = gender)) + \n  geom_col(position = \"dodge\") +\n  geom_text(aes(x = age_groups, y =mean_time, label = sprintf(\"%0.2f\", round(mean_time, digits = 2))),\n            position = position_dodge(width = 0.8), \n            vjust = -1, size = 2,\n            fontface=\"bold\", \n            family=\"Times\") +\n  labs(title = \"Average running time in Hour for each age group accross all countries\", \n       y= NULL, \n       x = NULL) + \n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(),\n        plot.title = element_text(family = \"Times\"), \n        axis.text = element_blank()) + \n  theme_minimal()\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-10-26-10-26-2021-tidy-tuesday/10-26-2021-tidy-tuesday_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-10-26T10:59:57-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-10-19-a-really-cool-graph/",
    "title": "A really cool graph",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-10-19",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-10-19-a-really-cool-graph/a-really-cool-graph_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-10-19T10:13:56-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-10-19-tidy-tuesday-10-19-2021/",
    "title": "Tidy Tuesday 10-19-2021",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-10-19",
    "categories": [],
    "contents": "\nHere is the dataset:\n\n\n\n\n\n\nIn here, I am trying to explore the min and the max date for the plot:\n\n# A tibble: 1 × 2\n  `min(date)` `max(date)`\n  <date>      <date>     \n1 2021-05-10  2021-10-17 \n\n\n\n\n\n\n\n",
    "preview": "posts/2021-10-19-tidy-tuesday-10-19-2021/tidy-tuesday-10-19-2021_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-10-19T10:06:49-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-10-05-tidy-tuesday-05-10-2021/",
    "title": "Tidy Tuesday 05-10-2021",
    "description": "During this week, I am trying to find information about nurses in the US: their salary, how many nurses are there for each state in 2020.",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-10-05",
    "categories": [],
    "contents": "\n\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)         # for graphing and data cleaning\nlibrary(ggthemes)\nlibrary(ggplot2) # tidyverse data visualization package\n\n\n\n\n\nlibrary(ggmap)\nlibrary(tmaptools)\nlibrary(maps)\nlibrary(plotly)\nlibrary(scales)\n\n\n\n\n\nlibrary(readr)\nstatePopulation <- read_delim(\"statePopulation.csv\", \n    delim = \";\", escape_double = FALSE, trim_ws = TRUE)\n\n\n\n\n\nnurses <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv')\n\n\n\n\n\nnurses_join <- nurses %>% \n  left_join(statePopulation, by = \"State\" )\n\nnurses_join\n\n\n# A tibble: 1,242 × 24\n   State                 Year `Total Employed… `Employed Stand… `Hourly Wage Av…\n   <chr>                <dbl>            <dbl>            <dbl>            <dbl>\n 1 Alabama               2020            48850              2.9             29.0\n 2 Alaska                2020             6240             13               45.8\n 3 Arizona               2020            55520              3.7             38.6\n 4 Arkansas              2020            25300              4.2             30.6\n 5 California            2020           307060              2               58.0\n 6 Colorado              2020            52330              2.8             37.4\n 7 Connecticut           2020            33400              6.5             40.8\n 8 Delaware              2020            11410             11.4             35.7\n 9 District of Columbia  2020            10320              1.2             43.3\n10 Florida               2020           183130              2.2             33.4\n# … with 1,232 more rows, and 19 more variables:\n#   Hourly Wage Median <dbl>, Annual Salary Avg <dbl>,\n#   Annual Salary Median <dbl>, Wage/Salary standard error (%) <dbl>,\n#   Hourly 10th Percentile <dbl>, Hourly 25th Percentile <dbl>,\n#   Hourly 75th Percentile <dbl>, Hourly 90th Percentile <dbl>,\n#   Annual 10th Percentile <dbl>, Annual 25th Percentile <dbl>,\n#   Annual 75th Percentile <dbl>, Annual 90th Percentile <dbl>, …\n\n\n\nnurses_2020 <- nurses_join %>% \n  filter(Year == 2020) %>% \n  mutate(std_registered_per_1000 = `Total Employed RN` / Pop * 1000) %>% \n  mutate(`Registered Nurses per 1000 people` = std_registered_per_1000) %>% \n  mutate(state_lower = tolower(State)) \n  \nnurses_2020\n\n\n# A tibble: 54 × 27\n   State                 Year `Total Employed… `Employed Stand… `Hourly Wage Av…\n   <chr>                <dbl>            <dbl>            <dbl>            <dbl>\n 1 Alabama               2020            48850              2.9             29.0\n 2 Alaska                2020             6240             13               45.8\n 3 Arizona               2020            55520              3.7             38.6\n 4 Arkansas              2020            25300              4.2             30.6\n 5 California            2020           307060              2               58.0\n 6 Colorado              2020            52330              2.8             37.4\n 7 Connecticut           2020            33400              6.5             40.8\n 8 Delaware              2020            11410             11.4             35.7\n 9 District of Columbia  2020            10320              1.2             43.3\n10 Florida               2020           183130              2.2             33.4\n# … with 44 more rows, and 22 more variables:\n#   Hourly Wage Median <dbl>, Annual Salary Avg <dbl>,\n#   Annual Salary Median <dbl>, Wage/Salary standard error (%) <dbl>,\n#   Hourly 10th Percentile <dbl>, Hourly 25th Percentile <dbl>,\n#   Hourly 75th Percentile <dbl>, Hourly 90th Percentile <dbl>,\n#   Annual 10th Percentile <dbl>, Annual 25th Percentile <dbl>,\n#   Annual 75th Percentile <dbl>, Annual 90th Percentile <dbl>, …\n\n\n\nstates_map <- map_data(\"state\")\n\n\n\n\n\nnurses_median_salary <- nurses %>% \n  filter(Year == 2020) %>% \n  mutate(state_lower = tolower(State)) %>% \n  ggplot(aes(fill = `Annual Salary Median`)) + \n  geom_map(aes(map_id = state_lower), color = \"gray\", size = 0.3, map = states_map) + \n  expand_limits (x = states_map$long, y = states_map$lat) + \n  theme_map() + \n  scale_fill_gradient(low = \"floralwhite\", high = \"firebrick4\")\n\nggplotly(nurses_median_salary)\n\n\n\n\nThe second map I am going to create will be how many registered nurses per 1000 people:\n\n\nnurses_map <- nurses_2020 %>% \n  ggplot(aes(fill = `Registered Nurses per 1000 people`, label = State)) + \n  geom_map(aes(map_id = state_lower), color = \"gray\", size = 0.3, map = states_map) + \n  expand_limits (x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_gradient(low = \"white\", high = \"navy\") + labs (fill = \"Registered Nurses per 1000 people\")\n\nggplotly(nurses_map)\n\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-10-05T11:50:27-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-21-tidy-tuesday-09-21-2021/",
    "title": "Tidy Tuesday 09-21-2021",
    "description": "Here is my attempt for tidy tuesday 09-21-21. The dataset is about the Emmy Awards.",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-09-21",
    "categories": [],
    "contents": "\n\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)         # for graphing and data cleaning\n\n\n\n\n\n# Get the Data\n\n# Read in with tidytuesdayR package \n# Install from CRAN via: install.packages(\"tidytuesdayR\")\n# This loads the readme and all the datasets for the week of interest\n\n# Either ISO-8601 date or year/week works!\n\ntuesdata <- tidytuesdayR::tt_load('2021-09-21')\n\n\n\n    Downloading file 1 of 1: `nominees.csv`\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 39)\n\n\n\n    Downloading file 1 of 1: `nominees.csv`\n\nnominees <- tuesdata$nominees\n\n# Or read in the data manually\n\nnominees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-21/nominees.csv')\n\n\n\n\n\n### Create a graph based on every category\nnominees_types <- nominees %>%\n  filter(year > 2010) %>%\n  group_by(year, type) %>%\n  summarize(count=n()) \n\n\nnominees_types %>%\n  ggplot(aes(x = as.factor(year), y = count, fill = type)) + geom_col(position = \"dodge\") + \n  geom_text(aes(x = as.factor(year), y = count, label = count),\n            position = position_dodge(width = 0.8), \n            vjust = -1, size = 2,\n            fontface=\"bold\", \n            family=\"Times\") + \n  labs(title = \"Emmy Awards Nominee and Winner from 2011 to 2021\") + \n  theme_minimal() + \n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(),\n        plot.title = element_text(family = \"Times\"))\n\n\n\n\nIn here, we can clearly see that from 2011 to 2013, the number of nominee increased rapidly. However, the number of nominee in 2014 significantly dropped.\nAfter a strange 2014, the number of nominee increased significantly every year from 1630 nominees in 2015 to 2152 nominees in 2019. Meanwhile, the number of winner remains relatively stable.\n\n\n\n",
    "preview": "posts/2021-09-21-tidy-tuesday-09-21-2021/tidy-tuesday-09-21-2021_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-09-21T11:07:49-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-09-first-tidy-tuesday-09082021/",
    "title": "First Tidy Tuesday 09/08/2021",
    "description": "Here is my first tidy tuesday. It will improve over time!",
    "author": [
      {
        "name": "DucNgo",
        "url": {}
      }
    ],
    "date": "2021-09-09",
    "categories": [],
    "contents": "\n\n\nlibrary(tidyverse)         # for graphing and data cleaning\n\n\n\n\n\n# Get the Data\nconstructors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-07/constructors.csv')\nconstructor_standings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-07/constructor_standings.csv')\n\n\n\n\n\nconstructor_standings %>%\n  group_by(constructorId) %>%\n  summarize(total_points = sum(points)) %>%\n  filter(constructorId < 50) %>%\n  ggplot(aes(x = constructorId, y = total_points)) + geom_col(fill = \"blue\") + \n  labs(title = \"The total number of points for the first 50 constructors\")\n\n\n\n\nFor this week’s data, I decide to look into the constructor ID and the total number of points for the first 50 constructors. We can see that constructor number 6 - ferrari has the highest points of them all.\nRight now, the question I have is that when I try to filter the top constructor and I try to make a geom_col, the graph is not looking great. The reason for that is because we have a lot of constructors and when I filter it, the constructor is really far apart. So how can I do it?\nMoreover, I would love to know the name of the constructors. Is there any way to combine constructor_standings with constructors? I have tried full join but it does not look great.\n\n\n\n",
    "preview": "posts/2021-09-09-first-tidy-tuesday-09082021/first-tidy-tuesday-09082021_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-09-11T22:51:13-05:00",
    "input_file": {}
  }
]
